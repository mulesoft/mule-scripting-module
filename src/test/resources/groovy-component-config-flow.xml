<?xml version="1.0" encoding="UTF-8"?>
<!--// START SNIPPET: full-config -->
<!--// START SNIPPET: component-example -->
<mule xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:script="http://www.mulesoft.org/schema/mule/scripting"
      xmlns:test="http://www.mulesoft.org/schema/mule/test"
      xsi:schemaLocation="
       http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
       http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
       http://www.mulesoft.org/schema/mule/test http://www.mulesoft.org/schema/mule/test/current/mule-test.xsd">

    <flow name="inlineScriptMutateProperty">
        <script:execute engine="groovy">
            <script:code>
                <![CDATA[
                return new org.mule.functional.junit4.TestLegacyMessageBuilder(message)
                    .addOutboundProperty('foo', 'bar-mutated').build()
            ]]>
            </script:code>
        </script:execute>
        <test:assert expression="#[mel:message.outboundProperties.foo == 'bar-mutated']"/>
    </flow>

    <flow name="inlineScriptAddProperty">
        <script:execute engine="groovy">
            <script:code>
                <![CDATA[
                return new org.mule.functional.junit4.TestLegacyMessageBuilder(message)
                    .addOutboundProperty('foo', 'bar').build()
            ]]></script:code>
        </script:execute>
        <test:assert expression="#[mel:message.outboundProperties.foo == 'bar']"/>
    </flow>

    <flow name="inlineScriptClearProperties">
        <script:execute engine="groovy">
            <script:code><![CDATA[
                return new HashMap()
             ]]></script:code>
        </script:execute>
        <test:assert expression="#[mel:message.outboundProperties.foo != 'bar']"/>
        <test:assert expression="#[mel:payload instanceof HashMap]"/>
    </flow>

    <flow name="inlineScriptMutateVariable">
        <script:execute engine="groovy">
            <script:code>
                vars['foo'] = 'bar-mutated'
             </script:code>
        </script:execute>
        <test:assert count="0"/>
    </flow>
    
    <flow name="inlineScriptAddVariable">
        <script:execute engine="groovy">
            <script:code>
                vars['foo'] = 'bar'
             </script:code>
        </script:execute>
        <test:assert count="0"/>
    </flow>

    <flow name="inlineScriptMutateVariablesMap">
        <script:execute engine="groovy">
            <script:code>
                vars = new HashMap()
             </script:code>
        </script:execute>
        <test:assert expression="#[vars.foo == 'bar']"/>
        <test:assert expression="#[mel:payload is HashMap]"/>
    </flow>

    <flow name="inlineScriptMutatePayload">
        <script:execute engine="groovy">
            <script:code>
                payload = 'bar-mutated'
                return 'bar-returned'
             </script:code>
        </script:execute>
        <test:assert expression="#[payload == 'bar-returned']"/>
    </flow>
    
    <flow name="scriptExpressionVariables">
        <script:execute engine="groovy">
            <script:code>
                return expr1 + expr2
            </script:code>
            <script:parameters>
                #[{expr1: vars.prop1, expr2: vars.prop2}]
            </script:parameters>
        </script:execute>
        <test:assert expression="#[payload == 'ReceivedA-OK']"/>
    </flow>

    <flow name="scriptReadVariable">
        <script:execute engine="groovy">
            <script:code>
                return vars.myVar
            </script:code>
        </script:execute>
    </flow>
    
    <flow name="scriptReferencesAppClass">
        <script:execute engine="groovy">
            <script:code>
                return new org.mule.tck.testmodels.fruit.Apple()
            </script:code>
        </script:execute>
    </flow>
    
    <flow name="inlineScriptFlow">
        <script:execute engine="groovy">
            <script:code>
                return payload.toString().replaceAll("l", "x")
            </script:code>
        </script:execute>
        <test:queue name="inlineScriptTestOut"/>
    </flow>

    <flow name="inlineScriptWithParametersFlow">
        <script:execute engine="groovy">
            <script:code>
                return payload.toString().replaceAll("$oldStr", "$newStr")
            </script:code>
            <script:parameters>
                #[{oldStr: "l", newStr: "x"}]
            </script:parameters>
        </script:execute>
        <test:queue name="inlineScriptWithParametersTestOut"/>
    </flow>

    <flow name="inlineScriptWithResolvedParameters">
        <script:execute engine="groovy">
            <script:code>
                return testVar.element
            </script:code>
            <script:parameters>
                #[{testVar: payload}]
            </script:parameters>
        </script:execute>
    </flow>

    <flow name="inlineScriptTargetValue">
        <script:execute engine="groovy" target="myVar">
            <script:code>
                return "hello"
            </script:code>
        </script:execute>
    </flow>
</mule>

